import ContentControls from"./content-control-common";import{chrome}from"../../../utils/polyfill.ts";import{allResourceTypes,DYNAMIC_RULE_CONTENT_CONTROL_PRIORITY,getNextDynamicRuleId}from"../mv3/dynamic-rule-utils";export class Mv3ContentControls extends ContentControls{constructor(){super(),this.getAll().then(e=>{this.CACHE=e})}async export(){return this.getAll()}async import(e){await this.deleteAllItems();let t=[];for(let r=0;r<e.length;r++){const o=e[r][0],s=e[r][1];t.push({id:await getNextDynamicRuleId(),priority:DYNAMIC_RULE_CONTENT_CONTROL_PRIORITY,action:{type:"redirect",redirect:{extensionPath:`/app/eventpages/block-mv3.html?type=user-block&url=${o}`}},condition:{urlFilter:o,resourceTypes:allResourceTypes}});const l=this.CACHE.has(o)?new Set(this.CACHE.get(o)):new Set;l.add(s),this.CACHE.set(o,l),console.debug("CCTRL MV3: Added item to cache",{url:o,category:s,cache:this.CACHE})}console.debug("CCTRL MV3: Adding new rules",{newRules:t});try{await chrome.declarativeNetRequest.updateDynamicRules({addRules:t,removeRuleIds:[]})}catch(e){let t=chrome.runtime.lastError;throw t&&console.error("CCTRL MV3: Error adding dynamic rules",t),console.error("CCTRL MV3: Error adding dynamic rules",e),e}console.debug("CCTRL MV3: Import successful",{newRules:t,cache:this.CACHE})}async addItem(e,t="general"){console.debug("CCTRL MV3: Adding item to cache",{url:e,category:t}),this.CACHE||(this.CACHE=new Map);let r=[];const o={id:await getNextDynamicRuleId(),priority:DYNAMIC_RULE_CONTENT_CONTROL_PRIORITY,action:{type:"redirect",redirect:{extensionPath:`/app/eventpages/block-mv3.html?type=user-block&url=${e}`}},condition:{urlFilter:e,resourceTypes:allResourceTypes}};r.push(o),console.debug("CCTRL MV3: Adding new rules",{newRules:r});try{await chrome.declarativeNetRequest.updateDynamicRules({addRules:r,removeRuleIds:[]})}catch(e){let t=chrome.runtime.lastError;throw t&&console.error("CCTRL MV3: Error adding dynamic rules",t),console.error("CCTRL MV3: Error adding item to cache",e),e}const s=this.CACHE.has(e)?new Set(this.CACHE.get(e)):new Set;s.add(t),this.CACHE.set(e,s),console.debug("CCTRL: Added item to cache",{url:e,category:t,cache:this.CACHE})}async deleteItem(e,t){let r=await chrome.declarativeNetRequest.getDynamicRules(),o=r.find(t=>t.condition.urlFilter===e)?.id;return void 0===o?(console.error("Error deleting item: ruleIdToBeDeleted is undefined"),!1):(await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[o]},()=>{let e=chrome.runtime.lastError;e&&console.error("Error removing session rules",e)}),!!this.CACHE&&(this.CACHE.delete(e),console.debug("CCTRL: Deleted item from cache",{url:e,cache:this.CACHE}),!0))}async deleteAllItems(){let e=(await chrome.declarativeNetRequest.getDynamicRules()).map(({id:e})=>e);return await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:e},()=>{let e=chrome.runtime.lastError;e&&console.error("Error removing session rules",e)}),!!this.CACHE&&(this.CACHE.clear(),!0)}existsForUrl(e){return this.CACHE.has(e)}async getAll(){const e=(await chrome.declarativeNetRequest.getDynamicRules()).filter(e=>e.priority===DYNAMIC_RULE_CONTENT_CONTROL_PRIORITY);console.debug("Mv3ContentControls.getAll - rules: ",e),this.CACHE||(this.CACHE=new Map);for(let[t,r]of e.map(e=>[e.condition.urlFilter,"general"]))this.CACHE.set(t,r);return this.CACHE}getForUrl(e){return this.getAll().find(t=>t.condition.urlFilter===e)}saveItems(){}loadSavedItems(){}}