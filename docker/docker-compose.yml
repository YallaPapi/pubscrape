version: '3.8'

services:
  # Main scraping application
  pubscrape:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: vrsen-pubscrape
    restart: unless-stopped
    environment:
      - VRSEN_ENV=production
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - BING_API_KEY=${BING_API_KEY}
      - HUNTER_API_KEY=${HUNTER_API_KEY}
      - MAILTESTER_API_KEY=${MAILTESTER_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MAX_PAGES_PER_QUERY=${MAX_PAGES_PER_QUERY:-5}
      - RATE_LIMIT_RPM=${RATE_LIMIT_RPM:-12}
      - OUTPUT_DIR=/app/output
      - DATA_DIR=/app/data
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-pubscrape}
      - POSTGRES_USER=${POSTGRES_USER:-pubscrape}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ../output:/app/output
      - ../logs:/app/logs
      - ../data:/app/data
      - ../cache:/app/cache
      - ../state:/app/state
      - ../campaigns:/app/campaigns
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - pubscrape-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development version with hot reload
  pubscrape-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    container_name: vrsen-pubscrape-dev
    environment:
      - VRSEN_ENV=development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - BING_API_KEY=${BING_API_KEY}
      - HUNTER_API_KEY=${HUNTER_API_KEY}
      - MAILTESTER_API_KEY=${MAILTESTER_API_KEY}
      - LOG_LEVEL=DEBUG
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-pubscrape}
      - POSTGRES_USER=${POSTGRES_USER:-pubscrape}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ..:/app
      - /app/venv  # Exclude virtual environment
    ports:
      - "8001:8000"
      - "8081:8080"
    depends_on:
      - postgres
      - redis
    networks:
      - pubscrape-network
    profiles:
      - development

  # PostgreSQL database for storing leads and metadata
  postgres:
    image: postgres:15-alpine
    container_name: vrsen-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-pubscrape}
      - POSTGRES_USER=${POSTGRES_USER:-pubscrape}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - pubscrape-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pubscrape} -d ${POSTGRES_DB:-pubscrape}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: vrsen-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pubscrape-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx reverse proxy and static file server
  nginx:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: nginx
    container_name: vrsen-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../frontend/dist:/usr/share/nginx/html:ro
      - ../docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pubscrape
    networks:
      - pubscrape-network
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vrsen-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ../docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pubscrape-network
    profiles:
      - monitoring

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: vrsen-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - pubscrape-network
    profiles:
      - monitoring

  # ElasticSearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: vrsen-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pubscrape-network
    profiles:
      - logging

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: vrsen-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - pubscrape-network
    profiles:
      - logging

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    container_name: vrsen-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - pubscrape-network
    profiles:
      - storage

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: vrsen-pgadmin
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@vrsen.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - pubscrape-network
    profiles:
      - database-tools

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: vrsen-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis
    networks:
      - pubscrape-network
    profiles:
      - database-tools

networks:
  pubscrape-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local
  pgadmin_data:
    driver: local