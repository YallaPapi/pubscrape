/*************************************************************************
* ADOBE CONFIDENTIAL
* ___________________
*
*  Copyright 2015 Adobe Systems Incorporated
*  All Rights Reserved.
*
* NOTICE:  All information contained herein is, and remains
* the property of Adobe Systems Incorporated and its suppliers,
* if any.  The intellectual and technical concepts contained
* herein are proprietary to Adobe Systems Incorporated and its
* suppliers and are protected by all applicable intellectual property laws,
* including trade secret and or copyright laws.
* Dissemination of this information or reproduction of this material
* is strictly forbidden unless prior written permission is obtained
* from Adobe Systems Incorporated.
**************************************************************************/
import state from"./state.js";import{getClosestElementBasedOnSelector,LIST_VIEW,getElementsByClassNameSelectors,getAttachmentByFileTypeSelectors,sendAnalyticsEvent}from"./util.js";import{ACROBAT_NON_PDF_PROCESSED,addCommonClickListener,markElementAsProcessed}from"./gmail-verb-native-viewer.js";import{getAttachmentDetailsFromThreadData,getVisibleListView,isMultipleAttachmentWithSameName,shouldShowTouchPoint}from"./list-view-touch-point-service.js";const getListViewAttachmentsWithThreadElement=(e,t,s)=>{const o=getElementsByClassNameSelectors(e,"attachmentIcon","listView");if(0===o?.length)return;const n=getAttachmentByFileTypeSelectors(o,state?.gmailConvertToPdfConfig?.metadata?.selectors,ACROBAT_NON_PDF_PROCESSED);if(!n?.length)return{};const r={};for(const e of n){const o=getClosestElementBasedOnSelector(e,"threadElement","listView"),n=o?.querySelector("[data-thread-id]");if(!n)continue;const a=n.getAttribute("data-thread-id"),i=a?.substring(a?.indexOf("#")+1);isDataPresentForThreadId(i,t)&&(r[i]?r[i][s].push(e):r[i]={[s]:[e],threadElement:o})}return r};function mergeAttachments(e,t){if(t)for(const[s,o]of Object.entries(t)){e[s]||(e[s]=[]);const t=o.map((({url:e})=>e));e[s].push(...t)}}const getAttachmentURLAgainstName=e=>{const t={},s=Object.values(state?.gmailConvertToPdfConfig?.metadata?.fileExtToMimeTypeMap||{});for(const o of Object.values(e)){const{nonPDFAttachments:e,driveAttachments:n}=o;for(const r of s)e?.size>0&&mergeAttachments(t,e.get(r)),n?.size>0&&mergeAttachments(t,o.nonPDFDriveAttachments.get(r))}return t},isDataPresentForThreadId=(e,t)=>{let s=state.getMessagesForThreadId(e);return!s&&t&&t[e]&&(s=t[e].messages),!!s},getDataForThreadId=(e,t)=>{let s=state.getMessagesForThreadId(e);return!s&&t?.[e]&&(s=t[e].messages),s?getAttachmentURLAgainstName(s):null},processForAttachment=(e,t)=>{const s=getClosestElementBasedOnSelector(e,"attachmentDiv","listView");if(s&&"Y"!==e.getAttribute(ACROBAT_NON_PDF_PROCESSED)){markElementAsProcessed(e);const o=s.getAttribute("title"),n=isMultipleAttachmentWithSameName(t,o),r=!n&&t[o][0];!n&&shouldShowTouchPoint(r)&&addCommonClickListener(s,{name:o,url:r},LIST_VIEW,state?.eventControllerSignal)}},processForThread=(e,t,s,o)=>{const n=s[o],r=getDataForThreadId(e,t);if(r)for(const e of n)processForAttachment(e,r)},processForAllThreads=(e,t,s)=>{for(const[o,n]of Object.entries(e)){const e=n[s];e?.length>0&&processForThread(o,t,n,s)}},addTouchPointInNativeViewerViaListView=(e,t,s)=>{const o=getListViewAttachmentsWithThreadElement(e,t,s);o&&processForAllThreads(o,t,s)},addTouchpointToNativeViewerViaListView=e=>{try{if(!chrome?.runtime?.id||!state?.gmailConvertToPdfConfig?.enableConvertToPdfTouchpointInGmail)return;const t=getVisibleListView();t&&addTouchPointInNativeViewerViaListView(t,e,"nonPdfAttachments")}catch(e){sendAnalyticsEvent("DCBrowserExt:ListView:ProcessingError",{source:"Gmail",workflow:"ConvertToPdf"})}};export{addTouchpointToNativeViewerViaListView};