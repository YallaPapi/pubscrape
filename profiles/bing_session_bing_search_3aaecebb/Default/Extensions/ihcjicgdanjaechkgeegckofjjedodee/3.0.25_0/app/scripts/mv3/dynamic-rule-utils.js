import{chrome}from"../../../utils/polyfill.ts";import{isMV3,urlHost,browserName}from"../../../utils/utils";export const STATIC_RULE_BLOCKLIST_ADS_PRIORITY=9;export const STATIC_RULE_BLOCKLIST_MALWARE_PRIORITY=9;export const STATIC_RULE_WHITELIST_PRIORITY=10;export const STATIC_RULE_EASYLIST_ALLOW_PRIORITY=4;export const STATIC_RULE_EASYLIST_BLOCK_PRIORITY=5;export const DYNAMIC_EASYLIST_WHITELIST_PRIORITY=7;export const DYNAMIC_TRACKER_WHITELIST_PRIORITY=12;export const DYNAMIC_RULE_USER_BLOCKED_ITEMS_PRIORITY=27;export const DYNAMIC_RULE_ADS_PRIORITY=21;export const DYNAMIC_RULE_MALWARE_PRIORITY=22;export const DYNAMIC_RULE_SCAMS_PRIORITY=23;export const DYNAMIC_RULE_CONTENT_CONTROL_PRIORITY=24;export const DYNAMIC_RULE_HEURISTIC_PRIORITY=25;export const DYNAMIC_RULE_HEURISTIC_WHITELIST_PRIORITY=26;export const DYNAMIC_RULE_TEMPORARY_PRIORITY=29;export const DYNAMIC_RULE_ALL_PRIORITY=30;export const DYNAMIC_RULE_INDIVIDUAL_GRANULAR_PRIORITY=31;export const RISKY_TLDS_PRIORITY=15;export const getExistingDynamicRules=async e=>{if(!isMV3())return[];const t=await chrome.declarativeNetRequest.getDynamicRules()||[];return e?Array.isArray(e)?t.filter(t=>e.includes(t.priority)):t.filter(t=>t.priority===e):t};export const getExistingDynamicRulesByActionTypes=async(e,t)=>isMV3()?(await getExistingDynamicRules(t)).filter(t=>e.includes(t.action.type)):[];export const getLastDynamicRuleId=async()=>{let e=1;const t=await getExistingDynamicRules();return t.length>0&&(e=t[t.length-1].id),e};export const getLastSessionRuleId=async()=>{if(!isMV3())return 1;let e=1;const t=await getExistingSessionRules();return t.length>0&&(e=t.at(-1).id),e};let ruleIdLock=!1,highestAllocatedRuleId=0;export const resetHighestAllocatedRuleId=()=>{highestAllocatedRuleId=0};export const getNextDynamicRuleId=async()=>{for(;ruleIdLock;)await new Promise(e=>setTimeout(e,1));ruleIdLock=!0;try{let e=await getLastDynamicRuleId(),t=Math.max(e,highestAllocatedRuleId)+1;return highestAllocatedRuleId=t,t}finally{ruleIdLock=!1}};export const getNextSessionRuleId=async()=>{for(;ruleIdLock;)await new Promise(e=>setTimeout(e,1));ruleIdLock=!0;try{let e=await getLastSessionRuleId(),t=Math.max(e,highestAllocatedRuleId)+1;return highestAllocatedRuleId=t,t}finally{ruleIdLock=!1}};export const clearAllDynamicRules=async e=>{if(!isMV3())return;const t=(await getExistingDynamicRules(e)).map(e=>e.id);await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:[...t]})};export const getExistingSessionRules=()=>isMV3()?chrome.declarativeNetRequest.getSessionRules():[];const addSessionRules=async e=>{isMV3()&&await chrome.declarativeNetRequest.updateSessionRules({addRules:e,removeRuleIds:[]},()=>{let e=chrome.runtime.lastError;e&&console.error("Error adding session rules",e)})};export const addSimpleSessionRules=async(e,t,o=null)=>{if(!isMV3())return;let s=[];void 0===o&&(o=21);let r=await getLastSessionRuleId()+1;const i=await getExistingSessionRules();e=e.filter(e=>i.every(t=>t.condition.urlFilter!==e));let n=allSupportedResourceTypes();for(const i of e){const e={id:r,priority:o,action:{type:t},condition:{urlFilter:`||${i}`,resourceTypes:n}};s.push(e),r+=1}addSessionRules(s)};export const toggleGtldDomains=async(e,t)=>{if(isMV3())if(e){let e=await getLastDynamicRuleId()+1;const o=[];for(const s of t)o.push({id:e,priority:15,action:{type:"block"},condition:{urlFilter:`||.${s}`,resourceTypes:allSupportedResourceTypes()}}),e+=1;await chrome.declarativeNetRequest.updateDynamicRules({addRules:o,removeRuleIds:[]})}else await clearAllDynamicRules(15)};export const updateDynamicTrackerWhitelistRules=async e=>{if(!isMV3())return[];console.debug("UDTW: trackerWhitelist",{trackerWhitelist:e});const t=await getExistingDynamicRules(12),o=await getExistingDynamicRules(7),s=t.concat(o),r=0===s.length;let i=await getLastDynamicRuleId();const n=[];let l=s.length!==e.length;for(const t of e)if(t&&t.host&&t.tracker){let{host:e,tracker:o}=t;e=urlHost(e);const r="easylist"===o.toLowerCase(),a=s.filter(t=>t.condition.initiatorDomains&&t.condition.initiatorDomains.includes(e)||t.condition.urlFilter&&t.condition.urlFilter===o).length>0;if(l=l||!a,r){const t=[{id:++i,priority:7,action:{type:"allow"},condition:{urlFilter:"*",initiatorDomains:[e],resourceTypes:allSupportedResourceTypes()}},{id:++i,priority:7,action:{type:"allow"},condition:{urlFilter:e,resourceTypes:allSupportedResourceTypes()}}];n.push(...t)}else{const t={id:++i,priority:12,action:{type:"allow"},condition:{initiatorDomains:[e],urlFilter:o,resourceTypes:allSupportedResourceTypes()}};n.push(t)}}let a=[];if(l&&(a=s.map(e=>e.id)),l||r){console.debug("UDTWR: Attempting to add new rules",{rulesToAdd:n,ruleIdsToRemove:a,addLen:n.length,removeLen:a.length,existingLen:s.length});try{await chrome.declarativeNetRequest.updateDynamicRules({addRules:n,removeRuleIds:a})}catch(e){console.error("UDTWR: error updating dynamic rules",e),(e.message||e).toLowerCase().includes("dynamic rule count exceeded")&&(console.error("UDTWR: maximum number of dynamic rules reached"),await clearAllDynamicRules([12,7]))}}};export const removeDynamicTrackerWhitelistRules=async e=>{if(!isMV3())return;const t=[];for(const o of e)if(o&&o.host&&o.tracker){let{host:e,tracker:s,priority:r}=o;const i=(await getExistingDynamicRules(r)).filter(t=>{if(t.condition?.initiatorDomains?.includes(e)&&t.condition?.urlFilter===s)return!0});for(const e of i)t.push(e.id)}await chrome.declarativeNetRequest.updateDynamicRules({addRules:[],removeRuleIds:t})};export function allSupportedResourceTypes(){return"Firefox"===browserName()?allResourceTypes.filter(e=>!["webtransport","webbundle"].includes(e)):allResourceTypes}export function supportedSubFrameResourceTypes(){return"Firefox"===browserName()?subFrameResourceType.filter(e=>!["webtransport","webbundle"].includes(e)):subFrameResourceType}export const mainFrameResourceType=["main_frame"];export const subFrameResourceType=["sub_frame","stylesheet","script","image","font","object","xmlhttprequest","ping","csp_report","media","websocket","other","webtransport","webbundle"];export const allResourceTypes=[...mainFrameResourceType,...supportedSubFrameResourceTypes()];